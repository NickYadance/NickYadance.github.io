{"pageProps":{"data":{"id":"binarysearch_test","html":"<span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;gotest.tools/assert&quot;</span>\n\t<span class=\"hljs-string\">&quot;testing&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BinarySearchLowerBound</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tlow := <span class=\"hljs-number\">0</span>\n\thigh := <span class=\"hljs-built_in\">len</span>(arr)\n\t<span class=\"hljs-keyword\">for</span> low &lt; high {\n\t\tmid := low + (high-low)&gt;&gt;<span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">if</span> n &gt; arr[mid] {\n\t\t\tlow = mid + <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\thigh = mid\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> low\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BinarySearchUpperBound</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tlow := <span class=\"hljs-number\">0</span>\n\thigh := <span class=\"hljs-built_in\">len</span>(arr)\n\t<span class=\"hljs-keyword\">for</span> low &lt; high {\n\t\tmid := low + (high-low)&gt;&gt;<span class=\"hljs-number\">1</span>\n\t\t<span class=\"hljs-keyword\">if</span> n &gt;= arr[mid] {\n\t\t\tlow = mid + <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\thigh = mid\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> low\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BinarySearch</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>, n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n\tlowerBound := BinarySearchLowerBound(arr, n)\n\t<span class=\"hljs-keyword\">if</span> lowerBound &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; lowerBound &lt; <span class=\"hljs-built_in\">len</span>(arr) &amp;&amp; arr[lowerBound] == n {\n\t\t<span class=\"hljs-keyword\">return</span> lowerBound\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestBinarySearchLowerBound</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">0</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">1</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">2</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">9</span>), <span class=\"hljs-number\">3</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">4</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">15</span>), <span class=\"hljs-number\">5</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">1</span>)\n\tassert.Equal(t, BinarySearchLowerBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestBinarySearchUpperBound</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">9</span>), <span class=\"hljs-number\">4</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">5</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">15</span>), <span class=\"hljs-number\">6</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">4</span>)\n\tassert.Equal(t, BinarySearchUpperBound([]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>}, <span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>)\n}\n"}},"__N_SSG":true}