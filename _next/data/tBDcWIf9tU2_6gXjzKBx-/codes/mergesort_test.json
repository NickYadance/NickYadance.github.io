{"pageProps":{"data":{"id":"mergesort_test","html":"<span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;gotest.tools/assert&quot;</span>\n\t<span class=\"hljs-string\">&quot;testing&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Merge</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-type\">int</span>, l, mid, r <span class=\"hljs-type\">int</span>)</span></span> {\n\tk := l\n\tl1 := l\n\tr1 := mid\n\tl2 := mid + <span class=\"hljs-number\">1</span>\n\tr2 := r\n\t<span class=\"hljs-keyword\">for</span> l1 &lt;= r1 &amp;&amp; l2 &lt;= r2 {\n\t\t<span class=\"hljs-keyword\">if</span> nums[l1] &lt; nums[l2] {\n\t\t\ttmp[k] = nums[l1]\n\t\t\tl1 = l1 + <span class=\"hljs-number\">1</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\ttmp[k] = nums[l2]\n\t\t\tl2 = l2 + <span class=\"hljs-number\">1</span>\n\t\t}\n\t\tk = k + <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">for</span> l1 &lt;= r1 {\n\t\ttmp[k] = nums[l1]\n\t\tl1 = l1 + <span class=\"hljs-number\">1</span>\n\t\tk = k + <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">for</span> l2 &lt;= r2 {\n\t\ttmp[k] = nums[l2]\n\t\tl2 = l2 + <span class=\"hljs-number\">1</span>\n\t\tk = k + <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">for</span> l &lt;= r {\n\t\tnums[l] = tmp[l]\n\t\tl = l + <span class=\"hljs-number\">1</span>\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MergeSort</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-type\">int</span>, l, r <span class=\"hljs-type\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> r &gt; l {\n\t\tmid := l + (r-l)&gt;&gt;<span class=\"hljs-number\">1</span>\n\t\tMergeSort(nums, tmp, l, mid)\n\t\tMergeSort(nums, tmp, mid+<span class=\"hljs-number\">1</span>, r)\n\t\tMerge(nums, tmp, l, mid, r)\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestMergeSort</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n\tnums := []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}\n\ttmp := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(nums))\n\tMergeSort(nums, tmp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums)<span class=\"hljs-number\">-1</span>)\n\tassert.DeepEqual(t, nums, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>})\n}\n"}},"__N_SSG":true}